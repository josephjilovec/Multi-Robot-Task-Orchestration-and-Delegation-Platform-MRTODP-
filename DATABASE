## We will be using MongoDB with Mongoose, which provides a quick way to define and interact with data models in Node.js

## Install dependencies (npm install mongoose)

## Create a "models/Recipe.js" file for the Recipe schema

// models/Recipe.js
const mongoose = require('mongoose');

const recipeSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  ingredients: {
    type: String,
    required: true,
  },
  instructions: {
    type: String,
    required: true,
  },
  // Add more fields as needed (e.g., author, ratings, etc.)
});

const Recipe = mongoose.model('Recipe', recipeSchema);

module.exports = Recipe;


## In your "index.js" (main server file), set up the MongoDB connection

// index.js
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const mongoose = require('mongoose');

const app = express();
dotenv.config();

const PORT = process.env.PORT || 5000;

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true,
})
  .then(() => {
    console.log('Connected to MongoDB');
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
  })
  .catch((error) => {
    console.error('Error connecting to MongoDB:', error.message);
  });

// Middleware
app.use(cors());
app.use(express.json());

// Routes
const recipeRoutes = require('./routes/recipes');
app.use('/api/recipes', recipeRoutes);

// 404 Route
app.use((req, res) => {
  res.status(404).json({ message: 'Route not found' });
});


## Create a "data/recipes.json" file to seed your database with some initial recipe data (optional)

[
  {
    "title": "Delicious Chocolate Cake",
    "ingredients": "1 cup flour, 1 cup sugar, 1/2 cup cocoa powder, 1/2 tsp baking powder, 1/2 tsp baking soda, 1/4 tsp salt, 1/2 cup vegetable oil, 1/2 cup milk, 1 tsp vanilla extract",
    "instructions": "1. Preheat oven to 350°F (175°C). 2. In a large bowl, mix flour, sugar, cocoa powder, baking powder, baking soda, and salt. 3. Add oil, milk, and vanilla extract. Mix until smooth. 4. Pour the batter into a greased cake pan. 5. Bake for 25-30 minutes. 6. Let it cool before serving."
  },
  {
    "title": "Classic Spaghetti Carbonara",
    "ingredients": "8 oz spaghetti, 2 large eggs, 1 cup grated Pecorino Romano cheese, 4 oz pancetta or guanciale, 2 cloves garlic (minced), Salt and black pepper to taste",
    "instructions": "1. Cook spaghetti in a large pot of boiling salted water until al dente. 2. While the pasta is cooking, whisk eggs and grated cheese together in a bowl. 3. In a separate pan, cook pancetta or guanciale until crispy. 4. Add minced garlic to the pan and cook for another minute. 5. Drain the pasta and add it to the pan with the pancetta. 6. Quickly stir in the egg and cheese mixture until the pasta is coated. 7. Season with salt and black pepper. 8. Serve immediately."
  }
]


## In your "index.js," you can add code to seed the database with the initial recipe data

// index.js
const fs = require('fs');
const Recipe = require('./models/Recipe');

// Seed the database with initial recipe data (optional)
const seedData = fs.readFileSync('./data/recipes.json', 'utf8');
const recipes = JSON.parse(seedData);
Recipe.insertMany(recipes)
  .then(() => {
    console.log('Database seeded successfully');
  })
  .catch((error) => {
    console.error('Error seeding database:', error.message);
  });


## With this, your MongoDB database will be set up for the  web application. 
## The data will be stored in the "recipes" collection (corresponding to the "Recipe" model) in the MongoDB database.

## Remember to replace the placeholder MONGO_URI in the .env file with your actual MongoDB connection string.
