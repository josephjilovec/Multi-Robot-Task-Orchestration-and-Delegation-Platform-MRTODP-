```
// backend/robot_langs/val3/task.val3
// Purpose: Implements a task execution script for StÃ¤ubli robots in MRTODP using VAL3.
// Supports tasks like 'pick and place' with parameterized motion and tool control.
// Interfaces with backend/cpp/robot_interface/ via a shared memory interface for
// command reception and status reporting. Includes robust error handling for
// motion failures, invalid parameters, and interface issues, ensuring reliability
// for advanced users (e.g., robotics engineers) in a production environment.

// Application declaration
application TaskExecution

// Global variables
num task_id                    // Task identifier
string task_name[64]          // Task name (e.g., "pick_and_place")
point target_pos              // Target position for motion
num velocity                  // Motion velocity (mm/s)
bool tool_active              // Tool activation state
num error_code                // Error code for status reporting
string status_msg[128]        // Status message buffer

// Shared memory variables (interface with backend/cpp/robot_interface/)
pers num shm_cmd_id           // Shared memory: Command ID
pers string shm_task[64]      // Shared memory: Task name
pers num shm_params[6]        // Shared memory: Task parameters (position, velocity)
pers num shm_status           // Shared memory: Status code (0: success, non-zero: error)
pers string shm_msg[128]      // Shared memory: Status message

// Constants
num SUCCESS = 0
num ERR_INVALID_TASK = 1
num ERR_MOTION_FAIL = 2
num ERR_SHM_FAIL = 3
num MAX_VELOCITY = 500.0      // Max velocity (mm/s)
num POS_TOLERANCE = 0.1       // Position tolerance (mm)

// Main task execution function
task main()
  // Initialize variables
  task_id = 0
  task_name = ""
  velocity = 100.0
  tool_active = false
  error_code = SUCCESS
  status_msg = "Task initialized"
  target_pos = point(0, 0, 0, 0, 0, 0) // Default position

  // Main execution loop
  while true
    // Read command from shared memory
    if shm_cmd_id > 0
      task_id = shm_cmd_id
      task_name = shm_task
      velocity = shm_params[1]
      target_pos.tx = shm_params[2] // X coordinate
      target_pos.ty = shm_params[3] // Y coordinate
      target_pos.tz = shm_params[4] // Z coordinate
      target_pos.rx = shm_params[5] // Rotation X
      tool_active = shm_params[6] > 0.0 // Tool active if param > 0

      // Validate parameters
      if strlen(task_name) == 0
        error_code = ERR_INVALID_TASK
        status_msg = "Invalid task name"
        goto error_handling
      end
      if velocity <= 0 or velocity > MAX_VELOCITY
        error_code = ERR_INVALID_TASK
        status_msg = "Invalid velocity: " + numToStr(velocity)
        goto error_handling
      end

      // Execute task based on task_name
      if task_name == "pick_and_place"
        // Pick and place task: Move to target position and activate tool
        movej(target_pos, tool0, mDesc(velocity, 100, 100, 100)) // Joint motion
        if dist(getActualPos(), target_pos) > POS_TOLERANCE
          error_code = ERR_MOTION_FAIL
          status_msg = "Motion failed: Target not reached"
          goto error_handling
        end
        if tool_active
          // Activate gripper tool (e.g., dio 10)
          set(dio10, true) // Assume digital output 10 controls tool
          wait(2.0)        // Simulate pick/place duration
          set(dio10, false)
        end
        error_code = SUCCESS
        status_msg = "Pick and place completed"
      else
        // Unsupported task
        error_code = ERR_INVALID_TASK
        status_msg = "Unsupported task: " + task_name
        goto error_handling
      end

      // Write status to shared memory
      shm_status = error_code
      shm_msg = status_msg
      shm_cmd_id = 0 // Reset command ID to signal completion
    else
      // No command available, wait
      wait(0.1)
    end
    goto loop_end

    error_handling:
      // Write error status to shared memory
      shm_status = error_code
      shm_msg = status_msg
      shm_cmd_id = 0
      logMsg("ERROR: " + status_msg)
      stop() // Halt execution on error

    loop_end:
  endwhile

exception
  when motionError
    shm_status = ERR_MOTION_FAIL
    shm_msg = "Motion error: Position not reached"
    shm_cmd_id = 0
    logMsg("ERROR: Motion failure")
    stop()
  when ioError
    shm_status = ERR_SHM_FAIL
    shm_msg = "Shared memory access error"
    shm_cmd_id = 0
    logMsg("ERROR: Shared memory failure")
    stop()
endtask
```
