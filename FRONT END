## App.js (Main Component)

import React from 'react';
import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';
import Navbar from './components/Navbar';
import Home from './components/Home';
import RecipeDetails from './components/RecipeDetails';
import AddRecipe from './components/AddRecipe';

function App() {
  return (
    <Router>
      <Navbar />
      <Switch>
        <Route path="/" exact component={Home} />
        <Route path="/recipe/:id" component={RecipeDetails} />
        <Route path="/add" component={AddRecipe} />
      </Switch>
    </Router>
  );
}

export default App;


## Navbar.js (Navigation Component)

import React from 'react';
import { Link } from 'react-router-dom';

function Navbar() {
  return (
    <nav>
      <ul>
        <li><Link to="/">Home</Link></li>
        <li><Link to="/add">Add Recipe</Link></li>
      </ul>
    </nav>
  );
}

export default Navbar;


## Home.js (Home Component - Recipe Listing)

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function Home() {
  const [recipes, setRecipes] = useState([]);

  useEffect(() => {
    fetchRecipes();
  }, []);

  const fetchRecipes = async () => {
    try {
      const response = await axios.get('/api/recipes'); // Replace with the actual API endpoint
      setRecipes(response.data);
    } catch (error) {
      console.error('Error fetching recipes:', error);
    }
  };

  return (
    <div>
      <h2>Recipe Sharing and Rating</h2>
      <div>
        {recipes.map((recipe) => (
          <div key={recipe._id}>
            <h3>{recipe.title}</h3>
            {/* Display recipe details, ratings, etc. */}
          </div>
        ))}
      </div>
    </div>
  );
}

export default Home;


## RecipeDetails.js (Recipe Details Component)

import React from 'react';
import { useParams } from 'react-router-dom';

function RecipeDetails() {
  const { id } = useParams();

  // Fetch recipe details based on the 'id' parameter
  // Display recipe details, ratings, reviews, etc.

  return (
    <div>
      <h2>Recipe Details</h2>
      {/* Display recipe details */}
    </div>
  );
}

export default RecipeDetails;


## AddRecipe.js (Add Recipe Component)

import React, { useState } from 'react';
import axios from 'axios';

function AddRecipe() {
  const [recipeData, setRecipeData] = useState({
    title: '',
    ingredients: '',
    instructions: '',
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setRecipeData({ ...recipeData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      // Send recipeData to the server to add a new recipe
      await axios.post('/api/recipes', recipeData); // Replace with the actual API endpoint
      // Optionally, display a success message or redirect to the home page
    } catch (error) {
      console.error('Error adding recipe:', error);
      // Display an error message or handle errors
    }
  };

  return (
    <div>
      <h2>Add Recipe</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Title:</label>
          <input type="text" name="title" value={recipeData.title} onChange={handleChange} />
        </div>
        <div>
          <label>Ingredients:</label>
          <textarea name="ingredients" value={recipeData.ingredients} onChange={handleChange} />
        </div>
        <div>
          <label>Instructions:</label>
          <textarea name="instructions" value={recipeData.instructions} onChange={handleChange} />
        </div>
        <button type="submit">Add Recipe</button>
      </form>
    </div>
  );
}

export default AddRecipe;



## Here we have components for the home page, recipe details page, and adding a new recipe.
## We use Axios to interact with the server and fetch recipes, display recipe details, and add new recipes.

## Please note that the API endpoints for fetching recipes and adding a new recipe are placeholders in the code.
## You will need to implement these API routes on the server-side (back-end) to handle these requests.

## You can add more components, styling, and features to improve the user experience and overall functionality.
## Remember to set up the server-side and connect it with a database (like MongoDB) to store and manage recipes and user data.
