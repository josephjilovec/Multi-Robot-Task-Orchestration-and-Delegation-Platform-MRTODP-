## Setting up the project (bash)

mkdir recipe-sharing-backend
cd recipe-sharing-backend
npm init -y

## Install dependencies (bash)

npm install express mongoose cors dotenv


## Create the main server file (index.js)


// index.js
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const mongoose = require('mongoose');

const app = express();
dotenv.config();

const PORT = process.env.PORT || 5000;

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true,
})
  .then(() => {
    console.log('Connected to MongoDB');
    app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
    });
  })
  .catch((error) => {
    console.error('Error connecting to MongoDB:', error.message);
  });

// Middleware
app.use(cors());
app.use(express.json());

// Routes
const recipeRoutes = require('./routes/recipes');
app.use('/api/recipes', recipeRoutes);

// 404 Route
app.use((req, res) => {
  res.status(404).json({ message: 'Route not found' });
});


## Create a .env file in the root directory and add your MongoDB connection string and a JWT secret

MONGO_URI=your_mongodb_connection_string_here
JWT_SECRET=your_jwt_secret_here


## Create a "models/Recipe.js" file for the Recipe schema

// models/Recipe.js
const mongoose = require('mongoose');

const recipeSchema = new mongoose.Schema({
  title: {
    type: String,
    required: true,
  },
  ingredients: {
    type: String,
    required: true,
  },
  instructions: {
    type: String,
    required: true,
  },
  // Add more fields as needed (e.g., author, ratings, etc.)
});

const Recipe = mongoose.model('Recipe', recipeSchema);

module.exports = Recipe;


## Create a "routes/recipes.js" file for the Recipe routes

// routes/recipes.js
const express = require('express');
const router = express.Router();
const Recipe = require('../models/Recipe');

// Get all recipes
router.get('/', async (req, res) => {
  try {
    const recipes = await Recipe.find();
    res.status(200).json(recipes);
  } catch (error) {
    res.status(500).json({ error: 'Error fetching recipes from the database' });
  }
});

// Get a single recipe by ID
router.get('/:id', async (req, res) => {
  try {
    const recipe = await Recipe.findById(req.params.id);
    if (!recipe) {
      return res.status(404).json({ error: 'Recipe not found' });
    }
    res.status(200).json(recipe);
  } catch (error) {
    res.status(500).json({ error: 'Error fetching recipe from the database' });
  }
});

// Add a new recipe
router.post('/', async (req, res) => {
  try {
    const { title, ingredients, instructions } = req.body;
    const newRecipe = new Recipe({
      title,
      ingredients,
      instructions,
    });
    await newRecipe.save();
    res.status(201).json(newRecipe);
  } catch (error) {
    res.status(500).json({ error: 'Error adding a new recipe' });
  }
});

// Delete a recipe by ID
router.delete('/:id', async (req, res) => {
  try {
    const recipe = await Recipe.findByIdAndDelete(req.params.id);
    if (!recipe) {
      return res.status(404).json({ error: 'Recipe not found' });
    }
    res.status(200).json({ message: 'Recipe deleted successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Error deleting the recipe' });
  }
});

// Update a recipe by ID
router.put('/:id', async (req, res) => {
  try {
    const { title, ingredients, instructions } = req.body;
    const updatedRecipe = await Recipe.findByIdAndUpdate(
      req.params.id,
      { title, ingredients, instructions },
      { new: true }
    );
    res.status(200).json(updatedRecipe);
  } catch (error) {
    res.status(500).json({ error: 'Error updating the recipe' });
  }
});

module.exports = router;


## This is a basic server with routes to handle fetching, adding, updating, and deleting recipes. 
## The Recipe model is defined in "models/Recipe.js," and the recipe routes are implemented in "routes/recipes.js."

## Make sure to replace the placeholder API endpoints in the front-end code (App.js) with the actual API endpoints on the server.
